name: Cross-build Kernel

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Building Dyna Kernel for ${{ matrix.target_arch }} using (${{ matrix.compiler }}) compiler
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target_arch: [ amd64, aarch64 ]
        os: [ ubuntu-22.04 ]
        include:
          - os: ubuntu-22.04
            compiler: clang-14
            cross-bindir: /usr/lib/llvm-14/bin
            pkgs: bmake libarchive-dev clang-14 lld-14
          - target_arch: amd64
            target: amd64
          - target_arch: aarch64
            target: arm64
    steps:
      - uses: actions/checkout@v3
      - name: install packages (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update --quiet || true
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.pkgs }}
      - name: create environment
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          if [ -n "${{ matrix.cross-bindir }}" ]; then
            echo "EXTRA_BUILD_ARGS=--cross-bindir=${{ matrix.cross-bindir }}" >> $GITHUB_ENV
          fi
          mkdir -p ../build
          echo "MAKEOBJDIRPREFIX=${PWD%/*}/build" >> $GITHUB_ENV
          # heh, works on Linux/BSD/macOS ...
          echo "NPROC=`getconf _NPROCESSORS_ONLN 2>/dev/null || getconf NPROCESSORS_ONLN 2>/dev/null || echo 1`" >> $GITHUB_ENV
      - name: bootstrap bmake
        run: ./tools/build/make.py --debug $EXTRA_BUILD_ARGS TARGET=${{ matrix.target }} TARGET_ARCH=${{ matrix.target_arch }} -n
      - name: make kernel-toolchain
        run: ./tools/build/make.py --debug $EXTRA_BUILD_ARGS TARGET=${{ matrix.target }} TARGET_ARCH=${{ matrix.target_arch }} kernel-toolchain -s -j$NPROC -DWITH_DISK_IMAGE_TOOLS_BOOTSTRAP
      - name: make buildkernel
        run: ./tools/build/make.py --debug $EXTRA_BUILD_ARGS TARGET=${{ matrix.target }} TARGET_ARCH=${{ matrix.target_arch }} KERNCONF=GENERIC NO_MODULES=yes buildkernel -s -j$NPROC $EXTRA_MAKE_ARGS
      - name: Upload Kernel Build
        uses: actions/upload-artifact@v2
        with:
          name: kernel-${{matrix.target}}
          path: /home/runner/work/dynaOS/build/home/runner/work/dynaOS/dynaOS/${{ matrix.target }}.${{ matrix.target_arch }}/sys/GENERIC/kernel
      - name: Build ISO
        run: make -C release cdrom -DNOPORTS -DNODOC
        
        
